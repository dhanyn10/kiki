@import "../config";
@import "../function";

/* reset css */
*{
    @include boxsizing(border-box);
}

a,
body,
blockquote,
button,
code,
form,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
nav,
input,
pre > code,
table
{
  font-family:"Arial";
  margin:0;
  padding:0;
}

a
{
    color: #1E88E5;
}

body
{
    font-size: 16px;
}

/*blockquote*/
blockquote
{
    display: block;
    width: 100%;
    border-left: 0.4rem solid #212121;
    background: #FAFAFA;
    color: #212121;
    padding: 1.4rem;
}

blockquote > .footer
{
    display: block;
    color: #616161;
    font-size: 0.8rem;
    margin-top: 0.5rem;
}

/*code and pre*/
code,
pre > code
{
    font-family: Courier New, Courier, monospace;
    background: #EEEEEE;
    border-radius: 4px;
}

code
{
    padding: 0.5rem 0.8rem;
    display: inline-block;
}

pre > code
{
    overflow: auto;
    padding: 1rem 1.4rem;
    display: block;
}

ul,
ol
{
    padding: 0 1.6rem;
}

/*heading*/
$headingfont : 4.3rem;
$headingmargin : 2.1rem;

@include multitagnumbered(6, h)
{
    display: block;
    font-weight: 500;
    line-height: 110%;
}

@for $i from 0 through 5
{
    h#{$i+1}
    {
        font-size: $headingfont - 0.66 * $i;
        margin: $headingmargin - (0.3 * $i) 0;
    }
}

hr
{
    display: block;
    margin: 1rem 0;
    border-style: solid;
    border-color: #d1d1d1;
}
/*jumper general*/
$jumperarray : ('mb', 'mt');
@include multiclassnumberedarray(6, $jumperarray)
{
    display: block;
}

/*jumper each*/
$jumpermargin: 1rem;
@for $i from 0 through 5
{
    .mb-#{$i+1}
    {
        margin-bottom:$jumpermargin + $i 0;
    }
    .mt-#{$i+1}
    {
        margin-top:$jumpermargin + $i 0;
    }
}

/*instant styling*/
.block
{
    display: block;
    width: 100%;
}
/*text align center*/
.center
{
    text-align: center;
}

/*float right*/
.right
{
    float: right;
}

/*static component, disable user-select and mouse-over*/
.static
{
    @include userselect(none);
    cursor: default;
}
/*global background*/
@each $color in $materialcolor
{
    $getcolor   : nth($color, 1);
    $colorname  : str-slice($getcolor, 2);
    $getvalue   : nth($color, 2);
    $colorvalue : nth($getvalue, 1);
    .bg-#{nth($colorname, 1)}
    {
        background: #{$colorvalue};
    }
    .text-#{nth($colorname, 1)},
    .text-#{nth($colorname, 1)} a
    {
        color: #{$colorvalue};
    }
}